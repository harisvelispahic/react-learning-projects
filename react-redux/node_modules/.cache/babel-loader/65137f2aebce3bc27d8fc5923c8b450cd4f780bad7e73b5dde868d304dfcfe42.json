{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice /* , createReducer*/ } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    // Here we ARE allowed to edit the original state, unlike in the counterReducer function\n    // Actually, it only looks to us that we are modifying the original state, however redux toolkit handles that in the background for us\n    decrement(state) {\n      state.counter++;\n    },\n    increment(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter += action.amount;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst counterReducer = (prevState = initialState, action) => {\n  if (action.type === \"decrement\") {\n    return {\n      counter: prevState.counter - 1,\n      showCounter: prevState.showCounter\n    };\n  }\n  if (action.type === \"increment\") {\n    return {\n      counter: prevState.counter + 1,\n      showCounter: prevState.showCounter\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: prevState.counter + action.amount,\n      showCounter: prevState.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !prevState.showCounter,\n      counter: prevState.counter\n    };\n  }\n  return prevState;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","decrement","state","increment","increase","action","amount","toggle","counterReducer","prevState","type","store"],"sources":["C:/Users/haris/Desktop/react-redux/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice /* , createReducer*/ } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  counter: 0,\r\n  showCounter: true,\r\n};\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    // Here we ARE allowed to edit the original state, unlike in the counterReducer function\r\n    // Actually, it only looks to us that we are modifying the original state, however redux toolkit handles that in the background for us\r\n    decrement(state) {\r\n      state.counter++;\r\n    },\r\n    increment(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter += action.amount;\r\n    },\r\n    toggle(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst counterReducer = (prevState = initialState, action) => {\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: prevState.counter - 1,\r\n      showCounter: prevState.showCounter,\r\n    };\r\n  }\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: prevState.counter + 1,\r\n      showCounter: prevState.showCounter,\r\n    };\r\n  }\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: prevState.counter + action.amount,\r\n      showCounter: prevState.showCounter,\r\n    };\r\n  }\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      showCounter: !prevState.showCounter,\r\n      counter: prevState.counter,\r\n    };\r\n  }\r\n\r\n  return prevState;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,CAAC,4BAA4B,kBAAkB;AAEnE,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACR;IACA;IACAC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,IAAIS,MAAM,CAACC,MAAM;IAChC,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE;MACZA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMW,cAAc,GAAGA,CAACC,SAAS,GAAGd,YAAY,EAAEU,MAAM,KAAK;EAC3D,IAAIA,MAAM,CAACK,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLd,OAAO,EAAEa,SAAS,CAACb,OAAO,GAAG,CAAC;MAC9BC,WAAW,EAAEY,SAAS,CAACZ;IACzB,CAAC;EACH;EACA,IAAIQ,MAAM,CAACK,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLd,OAAO,EAAEa,SAAS,CAACb,OAAO,GAAG,CAAC;MAC9BC,WAAW,EAAEY,SAAS,CAACZ;IACzB,CAAC;EACH;EACA,IAAIQ,MAAM,CAACK,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACLd,OAAO,EAAEa,SAAS,CAACb,OAAO,GAAGS,MAAM,CAACC,MAAM;MAC1CT,WAAW,EAAEY,SAAS,CAACZ;IACzB,CAAC;EACH;EACA,IAAIQ,MAAM,CAACK,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLb,WAAW,EAAE,CAACY,SAAS,CAACZ,WAAW;MACnCD,OAAO,EAAEa,SAAS,CAACb;IACrB,CAAC;EACH;EAEA,OAAOa,SAAS;AAClB,CAAC;AAED,MAAME,KAAK,GAAGlB,WAAW,CAACe,cAAc,CAAC;AAEzC,eAAeG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}